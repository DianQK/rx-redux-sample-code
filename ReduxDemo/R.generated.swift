// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R {
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `DianQK`.
    static let dianQK = ImageResource(bundle: _R.hostingBundle, name: "DianQK")
    /// Image `btn_add`.
    static let btn_add = ImageResource(bundle: _R.hostingBundle, name: "btn_add")
    /// Image `btn_delete_press`.
    static let btn_delete_press = ImageResource(bundle: _R.hostingBundle, name: "btn_delete_press")
    /// Image `btn_delete`.
    static let btn_delete = ImageResource(bundle: _R.hostingBundle, name: "btn_delete")
    /// Image `redux`.
    static let redux = ImageResource(bundle: _R.hostingBundle, name: "redux")
    
    /// `UIImage(named: "DianQK", bundle: ..., traitCollection: ...)`
    static func dianQK(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dianQK, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_add", bundle: ..., traitCollection: ...)`
    static func btn_add(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_delete", bundle: ..., traitCollection: ...)`
    static func btn_delete(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_delete_press", bundle: ..., traitCollection: ...)`
    static func btn_delete_press(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_delete_press, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "redux", bundle: ..., traitCollection: ...)`
    static func redux(compatibleWith traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.redux, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  static let hostingBundle = Bundle(identifier: "gg.swift.t.ReduxDemo") ?? Bundle.main
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}